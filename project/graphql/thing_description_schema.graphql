# metamodel_version: 1.7.0
type ActionAffordance
  {
    titles: [MultiLanguage]
    descriptions: [MultiLanguage]
    title: MultiLanguage
    description: MultiLanguage
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    name: String!
    uriVariables: [DataSchema]
    forms: [Form]
    safe: Boolean
    synchronous: Boolean
    idempotent: Boolean
    input: DataSchema
    output: DataSchema
  }

type AdditionalExpectedResponse
  {
    contentType: String!
    additionalOutputSchema: String
    success: Boolean
    schema: String
  }

type DataSchema
  {
    description: MultiLanguage
    title: MultiLanguage
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    propertyName: String
    writeOnly: String
    readonly: String
  }

type EventAffordance
  {
    titles: [MultiLanguage]
    descriptions: [MultiLanguage]
    title: MultiLanguage
    description: MultiLanguage
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    name: String!
    uriVariables: [DataSchema]
    forms: [Form]
    subscription: DataSchema
    cancellation: DataSchema
    notification: DataSchema
    notificationResponse: DataSchema
  }

type ExpectedResponse
  {
    contentType: String!
  }

type Form
  {
    target: AnyUri!
    href: AnyUri!
    contentType: String
    contentCoding: String
    securityDefinitions: String
    scopes: String
    returns: ExpectedResponse
    additionalReturns: [AdditionalExpectedResponse]
    subprotocol: String
    operationType: [OperationTypes]
  }

type InteractionAffordance
  {
    titles: [MultiLanguage]
    descriptions: [MultiLanguage]
    title: MultiLanguage
    description: MultiLanguage
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    name: String!
    uriVariables: [DataSchema]
    forms: [Form]
  }

type Link
  {
    target: AnyUri!
    hintsAtMediaType: String
    type: String
    relation: String
    anchor: AnyUri
    sizes: String
    hreflang: String
  }

type MultiLanguage
  {
    key: String!
  }

type PropertyAffordance implements DataSchema
  {
    titles: [MultiLanguage]
    descriptions: [MultiLanguage]
    title: MultiLanguage
    description: MultiLanguage
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    name: String!
    uriVariables: [DataSchema]
    forms: [Form]
    observable: Boolean
    propertyName: String
    writeOnly: String
    readonly: String
  }

type SecurityScheme
  {
    @type: [String]
    descriptions: [MultiLanguage]
    description: String
    proxy: AnyUri
    scheme: SecuritySchemeType!
  }

type Thing
  {
    id: AnyUri!
    title: MultiLanguage
    description: MultiLanguage
    titles: [MultiLanguage]
    descriptions: [MultiLanguage]
    @type: [String]
    titleInLanguage: MultiLanguage
    descriptionInLanguage: MultiLanguage
    securityDefinitions: [String]
    security: [String]
    schemaDefinitions: [DataSchema]
    profile: [AnyUri]
    instance: String
    created: Datetime
    modified: Datetime
    supportContact: AnyUri
    base: AnyUri
    version: VersionInfo
    forms: [Form]
    links: [Link]
    properties: [PropertyAffordance]
    actions: [ActionAffordance]
    events: [EventAffordance]
  }

type VersionInfo
  {
    instance: String!
    model: String
  }

